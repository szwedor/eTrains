//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GUI.ConnectionService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConnectionService.IConnectionManagment")]
    public interface IConnectionManagment {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectionManagment/AddNewConnection", ReplyAction="http://tempuri.org/IConnectionManagment/AddNewConnectionResponse")]
        bool AddNewConnection(DomainModel.Models.Station departureStation, DomainModel.Models.Station arrivalStation, int valueHour, int valueMinute, int price, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectionManagment/AddNewConnection", ReplyAction="http://tempuri.org/IConnectionManagment/AddNewConnectionResponse")]
        System.Threading.Tasks.Task<bool> AddNewConnectionAsync(DomainModel.Models.Station departureStation, DomainModel.Models.Station arrivalStation, int valueHour, int valueMinute, int price, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectionManagment/Find", ReplyAction="http://tempuri.org/IConnectionManagment/FindResponse")]
        DomainModel.Models.ConnectionDefinition[] Find(DomainModel.Models.Station departure, DomainModel.Models.Station arrival, int price, int hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectionManagment/Find", ReplyAction="http://tempuri.org/IConnectionManagment/FindResponse")]
        System.Threading.Tasks.Task<DomainModel.Models.ConnectionDefinition[]> FindAsync(DomainModel.Models.Station departure, DomainModel.Models.Station arrival, int price, int hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectionManagment/UpdateConnection", ReplyAction="http://tempuri.org/IConnectionManagment/UpdateConnectionResponse")]
        bool UpdateConnection(DomainModel.Models.ConnectionDefinition cd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectionManagment/UpdateConnection", ReplyAction="http://tempuri.org/IConnectionManagment/UpdateConnectionResponse")]
        System.Threading.Tasks.Task<bool> UpdateConnectionAsync(DomainModel.Models.ConnectionDefinition cd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectionManagment/MakeArchival", ReplyAction="http://tempuri.org/IConnectionManagment/MakeArchivalResponse")]
        bool MakeArchival(DomainModel.Models.ConnectionDefinition cd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectionManagment/MakeArchival", ReplyAction="http://tempuri.org/IConnectionManagment/MakeArchivalResponse")]
        System.Threading.Tasks.Task<bool> MakeArchivalAsync(DomainModel.Models.ConnectionDefinition cd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectionManagment/AddNewConnections", ReplyAction="http://tempuri.org/IConnectionManagment/AddNewConnectionsResponse")]
        bool AddNewConnections(DomainModel.Models.ConnectionDefinition connectionDefinition, System.DateTime value, System.DateTime dateTime, int days, int h, int m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectionManagment/AddNewConnections", ReplyAction="http://tempuri.org/IConnectionManagment/AddNewConnectionsResponse")]
        System.Threading.Tasks.Task<bool> AddNewConnectionsAsync(DomainModel.Models.ConnectionDefinition connectionDefinition, System.DateTime value, System.DateTime dateTime, int days, int h, int m);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConnectionManagmentChannel : GUI.ConnectionService.IConnectionManagment, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectionManagmentClient : System.ServiceModel.ClientBase<GUI.ConnectionService.IConnectionManagment>, GUI.ConnectionService.IConnectionManagment {
        
        public ConnectionManagmentClient() {
        }
        
        public ConnectionManagmentClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConnectionManagmentClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConnectionManagmentClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConnectionManagmentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddNewConnection(DomainModel.Models.Station departureStation, DomainModel.Models.Station arrivalStation, int valueHour, int valueMinute, int price, string name) {
            return base.Channel.AddNewConnection(departureStation, arrivalStation, valueHour, valueMinute, price, name);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewConnectionAsync(DomainModel.Models.Station departureStation, DomainModel.Models.Station arrivalStation, int valueHour, int valueMinute, int price, string name) {
            return base.Channel.AddNewConnectionAsync(departureStation, arrivalStation, valueHour, valueMinute, price, name);
        }
        
        public DomainModel.Models.ConnectionDefinition[] Find(DomainModel.Models.Station departure, DomainModel.Models.Station arrival, int price, int hour) {
            return base.Channel.Find(departure, arrival, price, hour);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Models.ConnectionDefinition[]> FindAsync(DomainModel.Models.Station departure, DomainModel.Models.Station arrival, int price, int hour) {
            return base.Channel.FindAsync(departure, arrival, price, hour);
        }
        
        public bool UpdateConnection(DomainModel.Models.ConnectionDefinition cd) {
            return base.Channel.UpdateConnection(cd);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateConnectionAsync(DomainModel.Models.ConnectionDefinition cd) {
            return base.Channel.UpdateConnectionAsync(cd);
        }
        
        public bool MakeArchival(DomainModel.Models.ConnectionDefinition cd) {
            return base.Channel.MakeArchival(cd);
        }
        
        public System.Threading.Tasks.Task<bool> MakeArchivalAsync(DomainModel.Models.ConnectionDefinition cd) {
            return base.Channel.MakeArchivalAsync(cd);
        }
        
        public bool AddNewConnections(DomainModel.Models.ConnectionDefinition connectionDefinition, System.DateTime value, System.DateTime dateTime, int days, int h, int m) {
            return base.Channel.AddNewConnections(connectionDefinition, value, dateTime, days, h, m);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewConnectionsAsync(DomainModel.Models.ConnectionDefinition connectionDefinition, System.DateTime value, System.DateTime dateTime, int days, int h, int m) {
            return base.Channel.AddNewConnectionsAsync(connectionDefinition, value, dateTime, days, h, m);
        }
    }
}

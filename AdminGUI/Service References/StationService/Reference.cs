//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdminGUI.StationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Station", Namespace="http://schemas.datacontract.org/2004/07/DomainModel.Models")]
    [System.SerializableAttribute()]
    public partial class Station : AdminGUI.StationService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsArchivalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsArchival {
            get {
                return this.IsArchivalField;
            }
            set {
                if ((this.IsArchivalField.Equals(value) != true)) {
                    this.IsArchivalField = value;
                    this.RaisePropertyChanged("IsArchival");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Entity", Namespace="http://schemas.datacontract.org/2004/07/DomainModel")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AdminGUI.StationService.Station))]
    public partial class Entity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StationService.IStationManagment")]
    public interface IStationManagment {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStationManagment/Add", ReplyAction="http://tempuri.org/IStationManagment/AddResponse")]
        bool Add(string newStationText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStationManagment/Add", ReplyAction="http://tempuri.org/IStationManagment/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(string newStationText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStationManagment/AllStations", ReplyAction="http://tempuri.org/IStationManagment/AllStationsResponse")]
        AdminGUI.StationService.Station[] AllStations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStationManagment/AllStations", ReplyAction="http://tempuri.org/IStationManagment/AllStationsResponse")]
        System.Threading.Tasks.Task<AdminGUI.StationService.Station[]> AllStationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStationManagment/ChangeStation", ReplyAction="http://tempuri.org/IStationManagment/ChangeStationResponse")]
        bool ChangeStation(AdminGUI.StationService.Station station, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStationManagment/ChangeStation", ReplyAction="http://tempuri.org/IStationManagment/ChangeStationResponse")]
        System.Threading.Tasks.Task<bool> ChangeStationAsync(AdminGUI.StationService.Station station, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStationManagment/ChangeStation2", ReplyAction="http://tempuri.org/IStationManagment/ChangeStation2Response")]
        bool ChangeStation2(AdminGUI.StationService.Station station, bool archivalChecked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStationManagment/ChangeStation2", ReplyAction="http://tempuri.org/IStationManagment/ChangeStation2Response")]
        System.Threading.Tasks.Task<bool> ChangeStation2Async(AdminGUI.StationService.Station station, bool archivalChecked);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStationManagmentChannel : AdminGUI.StationService.IStationManagment, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StationManagmentClient : System.ServiceModel.ClientBase<AdminGUI.StationService.IStationManagment>, AdminGUI.StationService.IStationManagment {
        
        public StationManagmentClient() {
        }
        
        public StationManagmentClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StationManagmentClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StationManagmentClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StationManagmentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Add(string newStationText) {
            return base.Channel.Add(newStationText);
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(string newStationText) {
            return base.Channel.AddAsync(newStationText);
        }
        
        public AdminGUI.StationService.Station[] AllStations() {
            return base.Channel.AllStations();
        }
        
        public System.Threading.Tasks.Task<AdminGUI.StationService.Station[]> AllStationsAsync() {
            return base.Channel.AllStationsAsync();
        }
        
        public bool ChangeStation(AdminGUI.StationService.Station station, string text) {
            return base.Channel.ChangeStation(station, text);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeStationAsync(AdminGUI.StationService.Station station, string text) {
            return base.Channel.ChangeStationAsync(station, text);
        }
        
        public bool ChangeStation2(AdminGUI.StationService.Station station, bool archivalChecked) {
            return base.Channel.ChangeStation2(station, archivalChecked);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeStation2Async(AdminGUI.StationService.Station station, bool archivalChecked) {
            return base.Channel.ChangeStation2Async(station, archivalChecked);
        }
    }
}
